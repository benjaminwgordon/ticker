{"version":3,"sources":["StockPlot/StockPlot.jsx","StockPlot/StockPlotControls.jsx","API/getIntraday.js","API/get5d.js","API/get1m.js","API/get6m.js","StockPlot/StockPlotContainer.jsx","App.js","index.js"],"names":["StockPlot","props","data","minimum","maximum","showBars","showOpen","showClose","showHigh","showLow","yAxisDomain","ResponsiveContainer","width","height","ComposedChart","barGap","CartesianGrid","strokeDasharray","XAxis","dataKey","time","YAxis","domain","tickFormatter","tick","parseFloat","toPrecision","Tooltip","Legend","Bar","name","fill","barSize","map","entry","index","fillColor","openCloseSplit","Cell","date","Line","type","stroke","dot","StockPlotControls","ticker","setTicker","timeScale","setTimescale","setShowHigh","setShowLow","setShowOpen","setShowClose","setShowBars","useState","localTicker","setLocalTicker","className","onSubmit","e","preventDefault","htmlFor","id","value","onChange","target","checked","onClick","key","process","Observation","open","high","low","close","volume","lowHighSplit","this","getIntraday","a","query","axios","get","result","rawData","undefined","console","log","Infinity","Object","keys","slice","split","join","observation","push","Math","max","min","reverse","get5d","i","length","output","get1m","get6m","StockPlotContainer","queryResult","setQueryResult","errorMessage","setErrorMessage","useEffect","func","timeSeriesData","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6895ecd2.chunk.js","sourcesContent":["import React from 'react'\nimport {ResponsiveContainer, BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Line, Bar, Cell, ComposedChart, Legend} from 'recharts'\n\nconst StockPlot = (props) => {    \n    const {data, minimum, maximum, showBars, showOpen, showClose, showHigh, showLow} = props\n    const yAxisDomain = [(minimum - (maximum - minimum) * 0.2), (maximum + (maximum - minimum) * 0.2)]\n\n    return (\n        <ResponsiveContainer width=\"90%\" height={350}>\n            <ComposedChart barGap={-8} data={data}>\n                <CartesianGrid strokeDasharray=\"8 8\" />\n                <XAxis dataKey={(data[0].time ? \"time\" : \"date\")}/>\n                <YAxis domain={yAxisDomain} tickFormatter={tick => parseFloat(tick).toPrecision(4)}/>\n                <Tooltip />     \n                <Legend />  \n                {showBars && \n                    <Bar name=\"Low - High\" dataKey=\"lowHighSplit\" fill=\"green\" barSize={4}>\n                        {\n                            data.map((entry, index) => {\n                                const fillColor = entry.openCloseSplit[0] < entry.openCloseSplit[1] ? \"green\" : \"red\"\n                                return <Cell fill={fillColor} key={entry.date + entry.time}/>\n                            })\n                        }\n                    </Bar>\n                }\n                {showBars && \n                    <Bar name=\"Open - Close\" dataKey=\"openCloseSplit\" fill=\"green\" barSize={12}>\n                        {\n                            data.map((entry, index) => {\n                                const fillColor = entry.openCloseSplit[0] < entry.openCloseSplit[1] ? \"green\" : \"red\"\n                                return <Cell fill={fillColor} key={entry.date + entry.time}/>\n                            })\n                        }\n                    </Bar>\n                }\n                {showClose && <Line type=\"monotone\" name=\"close\" dataKey=\"close\" stroke=\"#ffee00\" dot={false} />}\n                {showOpen && <Line type=\"monotone\" name=\"open\" dataKey=\"open\" stroke=\"#03e6e6\" dot={false} />}\n                {showHigh && <Line type=\"monotone\" name=\"high\" dataKey=\"high\" stroke=\"#FF00CC\" dot={false} />}\n                {showLow && <Line type=\"monotone\" name=\"low\" dataKey=\"low\" stroke=\"#ff9100\" dot={false} />}\n            </ComposedChart>\n        </ResponsiveContainer>\n    )\n}\n\nexport default StockPlot\n","import React, {useState} from 'react'\n\nconst StockPlotControls = (props) => {\n    \n    const {ticker, setTicker, timeScale, setTimescale, showHigh, setShowHigh, showLow, setShowLow, showOpen, setShowOpen, showClose, setShowClose, showBars, setShowBars} = props\n\n    const [localTicker, setLocalTicker] = useState(ticker)\n\n    return (\n        <div className=\"stockplot-controls\">\n            <form className=\"stockplot-control-group ticker\" onSubmit={(e)=>{e.preventDefault(); setTicker(localTicker)}}>\n                <label htmlFor=\"tickerSymbolInput\">\n                    Ticker Symbol\n                </label>\n                <input \n                    type=\"text\" \n                    id=\"tickerSymbolInput\" \n                    value={localTicker} \n                    onChange={(e)=>{setLocalTicker(e.target.value)}}\n                />\n            </form>\n            <div className=\"stockplot-control-group timescale-radio-group\">\n                <button className={timeScale === \"1d\" ? \"button-toggle active left-cap\" : \"button-toggle left-cap\"} type=\"radio\" name=\"timescale\" value=\"1d\" id=\"1d-radio\" checked={timeScale === \"1d\"} onClick={() => setTimescale(\"1d\")}>1d</button>\n                <button className={timeScale === \"5d\" ? \"button-toggle active\" : \"button-toggle\"} type=\"radio\" name=\"timescale\" value=\"5d\" id=\"5d-radio\" checked={timeScale === \"5d\"} onClick={() => setTimescale(\"5d\")}>5d</button>\n                <button className={timeScale === \"1m\" ? \"button-toggle active\" : \"button-toggle\"} type=\"radio\" name=\"timescale\" value=\"1m\" id=\"1m-radio\" checked={timeScale === \"1m\"} onClick={() => setTimescale(\"1m\")}>1m</button>\n                <button className={timeScale === \"6m\" ? \"button-toggle active right-cap\" : \"button-toggle right-cap\"} type=\"radio\" name=\"timescale\" value=\"6m\" id=\"6m-radio\" checked={timeScale === \"6m\"} onClick={() => setTimescale(\"6m\")}>6m</button>\n            </div>\n            <div className=\"stockplot-control-group plot-toggles\">\n                <button className={showOpen ? \"button-toggle active left-cap\" : \"button-toggle left-cap\"} type=\"radio\" name=\"showOpen\" id=\"showOpenToggleControl\" onClick={()=>setShowOpen(!showOpen)}>Open</button>\n                <button className={showClose ? \"button-toggle active\" : \"button-toggle\"} type=\"radio\" name=\"showClose\" id=\"showCloseToggleControl\" onClick={()=>setShowClose(!showClose)}>Close</button>\n                <button className={showHigh ? \"button-toggle active\" : \"button-toggle\"} type=\"radio\" name=\"showHigh\" id=\"showHighToggleControl\" onClick={()=>setShowHigh(!showHigh)}>High</button>\n                <button className={showLow ? \"button-toggle active\" : \"button-toggle\"} type=\"radio\" name=\"showLow\" id=\"showLowToggleControl\" onClick={()=>setShowLow(!showLow)}>Low</button>\n                <button className={showBars ? \"button-toggle active right-cap\" : \"button-toggle right-cap\"} type=\"radio\" name=\"showBars\" id=\"showBarsToggleControl\" onClick={()=>setShowBars(!showBars)}>Bars</button>\n            </div>\n        </div>\n    )\n}\n\nexport default StockPlotControls\n","import axios from 'axios'\nconst key = process.env.REACT_APP_ALPHAVANTAGE_API_KEY\n\nclass Observation{\n    constructor(date, time, open, high, low, close, volume, openCloseSplit, lowHighSplit){\n        this.date = date\n        this.time = time\n        this.open = open\n        this.high = high\n        this.low = low\n        this.close = close\n        this.volume = volume\n        this.openCloseSplit = openCloseSplit\n        this.lowHighSplit = lowHighSplit\n    }\n}\n\nexport const getIntraday = async (ticker=\"gme\") => {\n    const query = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${ticker}&interval=30min&apikey=${key}`\n    let result = await axios.get(query)\n    const rawData = result.data[\"Time Series (30min)\"]\n    if (!rawData){\n        return undefined\n    }\n    console.log(rawData)\n\n    \n\n    let minimum = Infinity\n    let maximum = -Infinity  \n\n    const data = []\n    for (let key of Object.keys(rawData).slice(0,32)){\n        const date = key.split(\" \")[0].split(\"-\").slice(1).join(\"/\")\n        const time = key.split(\" \")[1].split(\":\").slice(0,2).join(\":\")\n        const open = parseFloat(rawData[key]['1. open'])\n        const high = parseFloat(rawData[key]['2. high'])\n        const low = parseFloat(rawData[key]['3. low'])\n        const close = parseFloat(rawData[key]['4. close'])\n        const volume = parseFloat(rawData[key]['5. volume'])\n        const openCloseSplit = [open, close]\n        const lowHighSplit = [low, high]\n        const observation = new Observation(date, time, open, high, low, close, volume, openCloseSplit, lowHighSplit)\n        data.push(observation)\n\n        // track min and max seen values for graph y axis scaling\n        \n        maximum = Math.max(maximum, high)\n        minimum = Math.min(minimum, low)\n    }\n    \n    return {\n        data: data.reverse(),\n        maximum,\n        minimum\n    }\n}","import axios from 'axios'\nconst key = process.env.REACT_APP_ALPHAVANTAGE_API_KEY\n\nclass Observation{\n    constructor(date, time, open, high, low, close, volume, openCloseSplit, lowHighSplit){\n        this.date = date\n        this.time= time\n        this.open = open\n        this.high = high\n        this.low = low\n        this.close = close\n        this.volume = volume\n        this.openCloseSplit = openCloseSplit\n        this.lowHighSplit = lowHighSplit\n    }\n}\n\nexport const get5d = async (ticker=\"gme\") => {\n    const query = `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${ticker}&interval=60min&apikey=${key}`\n    let result = await axios.get(query)\n    const rawData = result.data[\"Time Series (60min)\"]\n    if (!rawData){\n        return undefined\n    }\n\n    let minimum = Infinity\n    let maximum = -Infinity  \n\n    const data = []\n    const keys = Object.keys(rawData)\n    for (let i = 0; i < keys.length; i++){\n        //reduce data density\n        if (i % 2 == 0){\n            const key = keys[i]\n            const date = key.split(\" \")[0].split(\"-\").slice(1).join(\"/\")\n            const time = key.split(\" \")[1].split(\":\").slice(0,2).join(\":\")        \n            const open = parseFloat(rawData[key]['1. open'])\n            const high = parseFloat(rawData[key]['2. high'])\n            const low = parseFloat(rawData[key]['3. low'])\n            const close = parseFloat(rawData[key]['4. close'])\n            const volume = parseFloat(rawData[key]['5. volume'])\n            const openCloseSplit = [open, close]\n            const lowHighSplit = [low, high]\n            const observation = new Observation(date,time, open, high, low, close, volume, openCloseSplit, lowHighSplit)\n            data.push(observation)    \n\n            // track min and max seen values for graph y axis scaling\n            maximum = Math.max(maximum, high)\n            minimum = Math.min(minimum, low)\n        }\n    }\n\n    const output = {\n        data: data.reverse(),\n        maximum,\n        minimum\n    }\n\n    \n    return output\n}","import axios from 'axios'\nconst key = process.env.REACT_APP_ALPHAVANTAGE_API_KEY\n\nclass Observation{\n    constructor(date, open, high, low, close, volume, openCloseSplit, lowHighSplit){\n        this.date = date\n        this.open = open\n        this.high = high\n        this.low = low\n        this.close = close\n        this.volume = volume\n        this.openCloseSplit = openCloseSplit\n        this.lowHighSplit = lowHighSplit\n    }\n}\n\nexport const get1m = async (ticker=\"gme\") => {\n    const query = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${key}`\n    let result = await axios.get(query)\n    const rawData = result.data[\"Time Series (Daily)\"]\n    if (!rawData){\n        return undefined\n    }\n\n    let minimum = Infinity\n    let maximum = -Infinity  \n\n    const data = []\n    for (let key of Object.keys(rawData).slice(0,30)){\n        const date = key.split(\" \")[0].split(\"-\").slice(1).join(\"/\")\n        const open = parseFloat(rawData[key]['1. open'])\n        const high = parseFloat(rawData[key]['2. high'])\n        const low = parseFloat(rawData[key]['3. low'])\n        const close = parseFloat(rawData[key]['4. close'])\n        const volume = parseFloat(rawData[key]['5. volume'])\n        const openCloseSplit = [open, close]\n        const lowHighSplit = [low, high]\n        const observation = new Observation(date, open, high, low, close, volume, openCloseSplit, lowHighSplit)\n        data.push(observation)\n\n        // track min and max seen values for graph y axis scaling\n        \n        maximum = Math.max(maximum, high)\n        minimum = Math.min(minimum, low)\n    }\n\n    const output = {\n        data: data.reverse(),\n        maximum,\n        minimum\n    }\n\n    \n    return output\n}","import axios from 'axios'\nconst key = process.env.REACT_APP_ALPHAVANTAGE_API_KEY\n\nclass Observation{\n    constructor(date, open, high, low, close, volume, openCloseSplit, lowHighSplit){\n        this.date = date\n        this.open = open\n        this.high = high\n        this.low = low\n        this.close = close\n        this.volume = volume\n        this.openCloseSplit = openCloseSplit\n        this.lowHighSplit = lowHighSplit\n    }\n}\n\nexport const get6m = async (ticker=\"gme\") => {\n    const query = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${key}`\n    let result = await axios.get(query)\n    const rawData = result.data[\"Time Series (Daily)\"]\n    if (!rawData){\n        return undefined\n    }\n\n    let minimum = Infinity\n    let maximum = -Infinity  \n\n    const data = []\n    const keys = Object.keys(rawData)\n    for (let i = 0; i < keys.length; i++){\n        //reduce data density\n        if (i % 2 == 0){\n            const key = keys[i]\n            const date = key.split(\" \")[0].split(\"-\").slice(1).join(\"/\")\n            const open = parseFloat(rawData[key]['1. open'])\n            const high = parseFloat(rawData[key]['2. high'])\n            const low = parseFloat(rawData[key]['3. low'])\n            const close = parseFloat(rawData[key]['4. close'])\n            const volume = parseFloat(rawData[key]['5. volume'])\n            const openCloseSplit = [open, close]\n            const lowHighSplit = [low, high]\n            const observation = new Observation(date, open, high, low, close, volume, openCloseSplit, lowHighSplit)\n            data.push(observation)\n\n            // track min and max seen values for graph y axis scaling\n            \n            maximum = Math.max(maximum, high)\n            minimum = Math.min(minimum, low)\n        }\n    }\n\n    const output = {\n        data: data.reverse(),\n        maximum,\n        minimum\n    }\n\n    \n    return output\n}","import React, {useState, useEffect} from 'react'\nimport StockPlot from './StockPlot'\nimport StockPlotControls from './StockPlotControls'\nimport {get5d, getIntraday, get1m, get6m} from '../API'\n\nconst StockPlotContainer = () => {\n\n    const [ticker, setTicker] = useState(\"gme\")\n    const [timeScale, setTimescale] = useState(\"5d\")\n    const [queryResult, setQueryResult] = useState(\"\")\n    const [errorMessage, setErrorMessage] = useState(\"\")\n    const [showOpen, setShowOpen] = useState(false)\n    const [showClose, setShowClose] = useState(false)\n    const [showHigh, setShowHigh] = useState(false)\n    const [showLow, setShowLow] = useState(false)\n    const [showBars, setShowBars] = useState(true)\n    \n\n    useEffect( async () => {\n        const func = () => {\n            switch (timeScale){\n                case \"1d\": return getIntraday\n                case \"5d\": return get5d\n                case \"1m\": return get1m\n                case \"6m\": return get6m\n                default: return getIntraday\n            }\n        }\n        const timeSeriesData = await func()(ticker, timeScale)\n        if (!timeSeriesData){\n            setErrorMessage(\"request failed, check request parameters\")\n        }\n        else{\n            setErrorMessage(\"\")\n            setQueryResult(timeSeriesData)\n        }        \n    },[ticker, timeScale])\n\n    return (\n        <div className=\"stockplot-container\">\n            <StockPlotControls \n                ticker={ticker} \n                setTicker={setTicker} \n                timeScale={timeScale} \n                setTimescale={setTimescale}\n                setShowOpen={setShowOpen}\n                setShowClose={setShowClose}\n                setShowHigh={setShowHigh}\n                setShowLow={setShowLow}\n                setShowBars={setShowBars} \n                showOpen={showOpen}\n                showClose={showClose}\n                showHigh={showHigh}\n                showLow={showLow}\n                showBars={showBars} \n            />\n            {\n                queryResult && \n                <StockPlot \n                    data={queryResult.data} \n                    minimum={queryResult.minimum} \n                    maximum={queryResult.maximum} \n                    showOpen={showOpen}\n                    showClose={showClose}\n                    showHigh={showHigh}\n                    showLow={showLow}\n                    showBars={showBars}    \n                />\n            }\n\n            {\n                errorMessage && <h5>{errorMessage}</h5>\n            }\n        </div>\n    )\n}\n\nexport default StockPlotContainer\n","import './App.scss';\nimport StockPlotContainer from './StockPlot/StockPlotContainer'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StockPlotContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}